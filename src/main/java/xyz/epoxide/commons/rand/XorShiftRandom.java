package xyz.epoxide.commons.rand;

import java.util.Random;

/**
 * An implementation of java.utils.Random that overrides the existing linear congruential
 * generator with a xorshift generator. The benefit of a xorshift generator is that it performs
 * much faster on modern hardware. It also provides a higher quality sequence than
 * java.utili.Random, however it should not be trusted as cryptographically secure. More info
 * can be found here: https://en.wikipedia.org/wiki/Xorshift
 */
public final class XorShiftRandom extends Random {
    
    /**
     * The version identifier used for serialization.
     */
    private static final long serialVersionUID = 6259956189428778354L;
    
    /**
     * The value of the seed used by the generator. The value of this field changes every time
     * a new number is generated.
     */
    private long seed;
    
    /**
     * Constructs a new pseudo random number generator. The seed used is a combination of the
     * current system time and other system factors. It is very likely that this seed will be
     * unique.
     */
    public XorShiftRandom() {
        
        this(System.nanoTime());
    }
    
    /**
     * Constructs a new pseudo random number generator. This variation on the constructor uses
     * the hashcode of a string as the seed, allowing for easy end-user input.
     * 
     * @param seed The value to use for seeding the random instance.
     */
    public XorShiftRandom(String seed) {
        
        this(seed.hashCode());
    }
    
    /**
     * Constructs a new pseudo random number generator using a long as the seed for xorshift
     * random number generation. The next number in the sequence is generated by repeatedly
     * taking the exclusive or of the seed, with a bit-shifted version of itself. The
     * calculations used are significantly faster than Oracle's calculations when used on
     * modern cpus. Generators with the same seed will generate the same sequence.
     * 
     * @param seed The initial number used for generating the sequence.
     */
    public XorShiftRandom(long seed) {
        
        this.seed = seed == 0 ? 0xdeadbeef : seed;
    }
    
    /**
     * Provides the current seed of the random number generator.
     * 
     * @return The current value of the seed used by the generator.
     */
    public synchronized long getseed () {
        
        return this.seed;
    }
    
    @Override
    public synchronized void setSeed (long seed) {
        
        this.seed = seed;
        super.setSeed(seed);
    }
    
    @Override
    public XorShiftRandom clone () {
        
        return new XorShiftRandom(this.getseed());
    }
    
    @Override
    protected int next (int bits) {
        
        this.seed ^= this.seed << 21;
        this.seed ^= this.seed >>> 35;
        this.seed ^= this.seed << 4;
        this.seed &= (1L << bits) - 1;
        return (int) this.seed;
    }
}